* denote-tree

denote-tree is a simple utility, that allows you to see and move within tree
structure of your notes with standard GNU Emacs movement keys.  Because of how
it operates, stuff like setting a mark /just works/ without reimplementing them.

** Usage

Just clone this very repository, add it to your load path and enable the
package:

#+begin_src emacs-lisp
 (require 'denote-tree)
#+end_src

The entry point function is ~denote-tree~, which acts on current buffer
searching for any denote identifiers within it.

It is able to handle cyclical notes and provides a mechanism to move between
those cyclical nodes by default.  As a drawback, it is pretty dumb and has to
redraw entire tree from scratch if anything changes.

*** Keybindings for =*denote-tree*= buffer

| Keybinding | Function                |
|------------+-------------------------|
| n          | denote-tree-next-node   |
| p          | denote-tree-prev-node   |
| f          | denote-tree-child-node  |
| b          | denote-tree-parent-node |
| g          | denote-tree-redraw      |
| e          | denote-tree-edit-node   |
| RET        | denote-tree-enter-node  |

*** Visualization

#+begin_example
  '-* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    +-* Phasellus at dui in ligula mollis ultricies.
    | '-* Nullam libero mauris, consequat quis, varius et, dictum id, arcu.
    |   '-* Nulla posuere.
    +-* Nunc aliquet, augue nec adipiscing interdum,
    | '-* Donec vitae dolor.
    '-* Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.
    | +-* Nam euismod tellus id erat.
    | '-* Donec pretium posuere tellus.
    |   '-* Nullam libero mauris, consequat quis, varius et, dictum id, arcu.
    +-* Vestibulum convallis, lorem a tempus semper.
    '-* Dui dui euismod elit, vitae placerat urna tortor vitae lacus.
#+end_example

*** In depth doc

**** Customizable elements

- =denote-tree-preserve-teleports-p=, teleport back when accessing cyclical node
  from it's child.  When nil, always move to "real" parent of a node.
- =denote-tree-node-description=, elements of front matter to include in node's
  description.  User can also extend denote's front matter by any arbitrary
  element, but they have to add corresponding regex and type to
  =denote-tree-extend-filetype-with= in order for denote-tree to recognize it.
  That user variable also supports arbitrary strings.  Denote's default front
  matter elements: title, identifier, keywords, signature, date, symbol or
  arbitrary string.
- =denote-tree-max-traversal-depth=, maximum traversal depth of =denote-tree=.
  If t traverse all the way, if num, traverse n nodes deep.
- =denote-tree-title-colorize-function=, Add properties to information from the
  node according to type.  Function accepts two arguments STR and TYPE.  Choosen
  string from front-matter is propertized according to type from
  =denote-tree-node-description=.
- =denote-tree-buffer-prefix=, every denote tree is built by a custom custom
  prefix, customizable here, and root node of a tree.
- =denote-tree-fancy-edit=, use fancy propertized edit over thin wrapper around
  =denote-rename-file=.
- =denote-tree-extend-filetype-with=, extend what kinds of regexps =denote-tree=
  is aware of in your front matter.  It also provides backwards compatibility
  with versions od =denote= older than commit 3517ba2.

**** Faces

- =denote-tree-circular-node=, default face used for circular nodes.
- =denote-tree-node=, default face used for nodes.

**** User facing functions

- =denote-tree= (&optional buffer)
  Draw hierarchy between denote files as a tree.  The function uses either the
  current buffer, if called from a function or a BUFFER provided by the user.
- =denote-tree-next-node= (&optional arg)
  Move the point to the next sibling node ARG times.  If ARG is negative move
  to the prev sibling node ARG times.  If ARG is omitted, nil or zero, move
  once.
- =denote-tree-prev-node= (&optional arg)
  Move the point to the prev sibling node ARG times.  If ARG is negative move
  to the nextv sibling node ARG times.  If ARG is omitted, nil or zero, move
  once.
- =denote-tree-parent-node= (&optional arg)
  Move the point to the parent of a node ARG times.  If ARG is negative move to
  the child of a node ARG times.  If ARG is ommited, nil or zero, move once.
  If =denote-tree-preserve-teleports-p= is set to t, teleport to the parent
  the point came from.
- =denote-tree-child-node= (&optional arg)
  Move the point to the child of a node ARG times.  If ARG is negative move to
  the parent of a node ARG times.  If ARG is ommited, nil or zero, move once.
  With =universal-argument= reverse =denote-tree-preserve-teleports-p= one
  time.  If =denote-tree-preserve-teleports-p= is set to t, preserve the parent
  node position for future backtracking.
- =denote-tree-redraw= (&optional arg)
  Redraw the entire tree.  With =universal-argument=, redraw from node at
  point.
- =denote-tree-edit-node= ()
  Edit current note.  If =denote-tree-edit= is loaded, do it fancy style,
  otherwise default to denote's =denote-rename-file=.
- =denote-tree-enter-node= (&optional button)
  Enter node at point in other window.  BUTTON is pased as node's ID.

** Contributing

As usual, contributions are always welcome.  Feel free to open an issue on the
issue tracker, if you find a bug, have an idea, etc.  Same with code
contributions.

** To-Do list
*** Nice to have

- [X] Make it major mode agnostic;
- [X] give the user the ability to colorize node titles;
- [X] unite traversal functions;
- [ ] smarter redrawing of a tree (with hierarchy.el),
  - [ ] collapsible tree;
- [X] ability to edit the front matter at point;
- [X] edit front matter with widgets (as optional denote-tree-edit);
- [X] multiple denote-tree buffers.

*** Bare minimum before going public

- [X] Keep the position of the point in parent node when ascending, descending;
- [X] implement /teleportations/ when encountering the node that cycles up in
  the tree;
- [X] handle the movement with teleportations;
- [X] customization of /look and feel/ of the tree.
